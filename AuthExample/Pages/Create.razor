@page "/create"

<PageTitle> Create a user</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="wrapper">
        <div class="form-wrapper">
            <h3 class="title">Форма создания нового пользователя</h3>
            <div class="form-group">
                 <label for="name">Имя пользователя (логин):</label>
                 <InputText @bind-Value=user.Login id="name"/>
            </div>
            <div class="form-group">
                 <label for="password">Пароль пользователя:</label>
                 <InputText @bind-Value=user.Password id="password" type="password"/>
            </div>
            <div class="form-group">
                 <label for="role">Роль пользователя:</label>
                 <InputSelect id="role" @bind-Value=user.Role >
                    @foreach (var role in Enum.GetValues(typeof(Role)))
                    {
                        <option value="@role"> 
                            @(Role.User.CompareTo(role) == 0 ? "Пользователь" : "Администратор") 
                        </option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <ButtonComponent Classes="btn btn_size_m btn_bg_blue btn_title_style" BtnType="submit" Click="HandleValidSubmit" Title="Создать"/>
                <ButtonComponent Classes="btn btn_size_m btn_bg_blue btn_title_style" Click="CancelHandler" Title="Отмена" />
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Inject] NavigationManager? NavManager { get; set; }
    [Inject] DataContext? DataContext { get; set; }

    User user = new User();

    public async void HandleValidSubmit()
    {
        await DataContext!.Users.AddAsync(user);
        DataContext!.SaveChanges();
        NavManager!.NavigateTo("/list");
    }

    
    void CancelHandler() => NavManager!.NavigateTo("/list");

}